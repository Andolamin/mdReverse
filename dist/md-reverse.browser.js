(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["MdReverse"] = factory();
	else
		root["MdReverse"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/config */ \"./src/lib/config.js\");\n/* harmony import */ var _lib_mdReverse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/mdReverse */ \"./src/lib/mdReverse.js\");\n\r\n\r\n\r\n_lib_mdReverse__WEBPACK_IMPORTED_MODULE_1__[\"MdReverse\"].plugin = {\r\n    table: _lib_mdReverse__WEBPACK_IMPORTED_MODULE_1__[\"TablePlugin\"],\r\n    strickthrough: _lib_mdReverse__WEBPACK_IMPORTED_MODULE_1__[\"StrikethroughPlugin\"]\r\n};\r\n\r\nconst consolee = window.console;\r\n\r\nif (true) {\r\n    window.clrConsole = Object.assign(\r\n        {},\r\n        window.console,\r\n        {\r\n        success: function (message) {\r\n            const type = typeof message;\r\n            if (type === 'string' || type === 'number' || type === 'boolean')\r\n                consolee.log('%c' + message, _lib_config__WEBPACK_IMPORTED_MODULE_0__[\"CONSOLE_TYPE\"].success);\r\n            else consolee.log(message);\r\n        },\r\n        error: function (message) {\r\n            const type = typeof message;\r\n            if (type === 'string' || type === 'number' || type === 'boolean')\r\n                consolee.error('%c' + message, _lib_config__WEBPACK_IMPORTED_MODULE_0__[\"CONSOLE_TYPE\"].error);\r\n            else consolee.error(message);\r\n        },\r\n        info: function (message) {\r\n            const type = typeof message;\r\n            if (type === 'string' || type === 'number' || type === 'boolean')\r\n                consolee.info('%c' + message, _lib_config__WEBPACK_IMPORTED_MODULE_0__[\"CONSOLE_TYPE\"].info);\r\n            else consolee.info(message);\r\n        },\r\n        warn: function (message) {\r\n            const type = typeof message;\r\n            if (type === 'string' || type === 'number' || type === 'boolean')\r\n                consolee.warn('%c' + message, _lib_config__WEBPACK_IMPORTED_MODULE_0__[\"CONSOLE_TYPE\"].warn);\r\n            else consolee.warn(message);\r\n        }\r\n    });\r\n} else {}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (_lib_mdReverse__WEBPACK_IMPORTED_MODULE_1__[\"MdReverse\"]);\r\n\n\n//# sourceURL=webpack://MdReverse/./src/index.js?");

/***/ }),

/***/ "./src/lib/config.js":
/*!***************************!*\
  !*** ./src/lib/config.js ***!
  \***************************/
/*! exports provided: LS, LineSeparator, REGEXP, EL_TYPE, TOKEN_RULE, DEFAULT_RULE, GLOBAL_CONFIG, CONSOLE_TYPE, addToken */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LS\", function() { return LS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LineSeparator\", function() { return LineSeparator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"REGEXP\", function() { return REGEXP; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EL_TYPE\", function() { return EL_TYPE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TOKEN_RULE\", function() { return TOKEN_RULE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DEFAULT_RULE\", function() { return DEFAULT_RULE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GLOBAL_CONFIG\", function() { return GLOBAL_CONFIG; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CONSOLE_TYPE\", function() { return CONSOLE_TYPE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addToken\", function() { return addToken; });\n/* harmony import */ var _tools_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tools/tools */ \"./src/lib/tools/tools.js\");\n\r\n\r\n/**\r\n * @namespace\r\n * @type {{CRLF: string, LF: string, CR: string}}\r\n */\r\nconst LineSeparator = {\r\n    CR: '\\r',\r\n    LF: '\\n',\r\n    CRLF: '\\r\\n'\r\n};\r\nconst LS = LineSeparator.LF;\r\n\r\nconst REGEXP = {\r\n    whitespace: /\\s/,\r\n    tag: /<\\S+>/g,\r\n    attribute: /[a-zA-Z0-9\\-]+=\"[^\"]+\"/g,                   // 截取HTML标签的属性\r\n    escapeMdChar: /([\\\\`*_{}\\[\\]()#+\\-.!])/g,               // 转义Markdown保留字符\r\n    unescapeHTMLEntry: /&(amp|lt|gt|quot|nbsp);/g,          // 反转义HTML实体的保留字符\r\n    LineSeparator: {\r\n    }\r\n};\r\n\r\n/**\r\n * [HTML保留字符]{@link https://developer.mozilla.org/en-US/docs/Glossary/Entity#Reserved_characters}\r\n */\r\nconst RESERVED_CHAR_MAP = {\r\n    '&amp;': '&',\r\n    '&lt;': '<',\r\n    '&gt;': '>',\r\n    '&quot;': '\"',\r\n    '&nbsp;': ' '\r\n};\r\n\r\nlet nestingEl = {index: 54};\r\nlet emptyEl = {index: 17};\r\n/**\r\n * HTML元素映射表\r\n * [关于单/双标签（空/嵌套）元素]{@link https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web/HTML_basics}\r\n */\r\nlet EL_TYPE = {\r\n    'rootNode': -4,\r\n    // 无法识别的标签，默认有闭合标签，数值为2的倍数\r\n    'htmlNode': -2,\r\n    'all_element': 0,\r\n    // 双标签（tag）元素，偶数表示\r\n    'a': 2,\r\n    'h': 4,\r\n    'p': 6,\r\n    'em': 8,\r\n    'li': 10,\r\n    'ol': 12,\r\n    'ul': 14,\r\n    'div': 16,\r\n    'pre': 18,\r\n    'code': 20,\r\n    'span': 22,\r\n    'audio': 24,\r\n    'aside': 26,\r\n    'video': 28,\r\n    'strong': 30,\r\n    'script': 32,\r\n    'button': 34,\r\n    'article': 36,\r\n    'blockquote': 38,\r\n    'h1': 40,\r\n    'h2': 42,\r\n    'h3': 44,\r\n    'h4': 46,\r\n    'h5': 48,\r\n    'h6': 50,\r\n    /**\r\n     * 额外非标准HTML元素\r\n     */\r\n    /**\r\n     * [figure]{@link https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/figure}\r\n     */\r\n    'figure': 52,\r\n    'figcaption': 54,\r\n    // 文本元素\r\n    'textNode': 1,\r\n    // 单标签（tag）元素，奇数表示\r\n    'br': 3,\r\n    'hr': 5,\r\n    'img': 7,\r\n    'link': 9,\r\n    '!--': 11,\r\n    'input': 13,\r\n    'meta': 15,\r\n    '!----': 17,\r\n};\r\n\r\nconst DEFAULT_RULE = {\r\n    defaultToken: {\r\n        filterRule: {\r\n            attribute: [],\r\n            children: [EL_TYPE['all_element']]\r\n        },\r\n        convertRule: function (node) {\r\n            return '';\r\n        },\r\n        endRule: function (node) {\r\n            return '\\n';\r\n        }\r\n    },\r\n    doubleToken: {\r\n        filterRule: {\r\n            attribute: [],\r\n            children: [EL_TYPE['all_element']]\r\n        },\r\n        convertRule: function (node) {\r\n            return '';\r\n        },\r\n        endRule: function (node) {\r\n            return '';\r\n        }\r\n    },\r\n    singleToken: {\r\n        filterRule: {\r\n            attribute: [],\r\n            children: []\r\n        },\r\n        convertRule: function (node) {\r\n            return '';\r\n        },\r\n        endRule: function (node) {\r\n            return '';\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * HTML元素配置表\r\n */\r\nconst TOKEN_RULE = {\r\n    // // 无法识别的标签，默认有闭合标签，数值为2的倍数\r\n    [EL_TYPE['rootNode']]: DEFAULT_RULE.doubleToken,\r\n    [EL_TYPE['htmlNode']]: {\r\n        filterRule: {\r\n            attribute: [],\r\n            children: [EL_TYPE['all_element']]\r\n        },\r\n        convertRule: function (node) {\r\n            return `<${node.tag}>`;\r\n        },\r\n        endRule: function (node) {\r\n            return `</${node.tag}>\\n`;\r\n        }\r\n    },\r\n    [EL_TYPE['textNode']]: {\r\n        filterRule: {\r\n            attribute: [],\r\n            children: []\r\n        },\r\n        convertRule: function (node) {\r\n            let content = node.content;\r\n            // 转换需要转义的字符\r\n            // return (node.isHTML || node.isCode) ? content : content.replace(REGEXP.escapeChar, '\\\\$1');\r\n            content = content.replace(REGEXP.unescapeHTMLEntry, function (match) {\r\n                return RESERVED_CHAR_MAP[match] || '';\r\n            });\r\n\r\n            if (node.parentNode.type === EL_TYPE['strong']) {\r\n                content = _tools_tools__WEBPACK_IMPORTED_MODULE_0__[\"Tools\"].trim(content);\r\n            } else if (!node.isCode) {\r\n                content = _tools_tools__WEBPACK_IMPORTED_MODULE_0__[\"Tools\"].compressWs(content);\r\n            }\r\n            return content;\r\n        },\r\n        endRule: function (node) {\r\n            return ``;\r\n        }\r\n    },\r\n    [EL_TYPE['a']]: {\r\n        filterRule: {\r\n            attribute: ['href', 'title'],\r\n            children: [EL_TYPE['all_element']]\r\n        },\r\n        convertRule: function () {\r\n            return '[';\r\n        },\r\n        endRule: function (node) {\r\n            const attr = node.attribute;\r\n            return `](${attr['href'] || ''}` + (attr['title'] ? ` \"${attr['title']}\"` : ``) + `)`;\r\n        }\r\n    },\r\n    [EL_TYPE['h']]: DEFAULT_RULE.doubleToken,\r\n    [EL_TYPE['p']]: {\r\n        filterRule: {\r\n            attribute: [],\r\n            children: [EL_TYPE['all_element']]\r\n        },\r\n        convertRule: function (node) {\r\n            return node['child_pre'] || '';\r\n        },\r\n        endRule: function (node) {\r\n            return `\\n\\n`;\r\n        }\r\n    },\r\n    [EL_TYPE['em']]: {\r\n        filterRule: {\r\n            attribute: [],\r\n            children: [EL_TYPE['all_element']]\r\n        },\r\n        convertRule: function (node) {\r\n            return `*`;\r\n        },\r\n        endRule: function (node) {\r\n            return `*`;\r\n        }\r\n    },\r\n    [EL_TYPE['li']]: {\r\n        filterRule: {\r\n            attribute: [],\r\n            children: [EL_TYPE['all_element']]\r\n        },\r\n        convertRule: function (node) {\r\n            return (node['child_pre'] || '') + (node.parentNode.type === EL_TYPE['ol'] ? `${node.index + 1}. ` : `* `);\r\n        },\r\n        endRule: function (node) {\r\n            return '\\n';\r\n        }\r\n    },\r\n    [EL_TYPE['ol']]: {\r\n        filterRule: {\r\n            attribute: [],\r\n            children: [EL_TYPE['all_element']]\r\n        },\r\n        childNodeRule: {\r\n            pre: function (node) {\r\n                const type = node.parentNode.type;\r\n                return type === EL_TYPE['li'] ? '    ' : '';\r\n            }\r\n        },\r\n        convertRule: function (node) {\r\n            return `${node.parentNode.type === EL_TYPE['li'] ? '\\n' : ''}`;\r\n        },\r\n        endRule: function (node) {\r\n            return '';\r\n        }\r\n    },\r\n    [EL_TYPE['ul']]: {\r\n        filterRule: {\r\n            attribute: [],\r\n            children: [EL_TYPE['all_element']]\r\n        },\r\n        childNodeRule: {\r\n            pre: function (node) {\r\n                const type = node.parentNode.type;\r\n                return type === EL_TYPE['li'] ? '    ' : '';\r\n            }\r\n        },\r\n        convertRule: function (node) {\r\n            return `${node.parentNode.type === EL_TYPE['li'] ? '\\n' : ''}`;\r\n        },\r\n        endRule: function (node) {\r\n            // return `${node.parentNode.type === EL_TYPE['li'] ? '' : '\\n'}`;\r\n            return '';\r\n        }\r\n    },\r\n    [EL_TYPE['div']]: DEFAULT_RULE.defaultToken,\r\n    [EL_TYPE['pre']]: {\r\n        filterRule: {\r\n            attribute: [],\r\n            children: [EL_TYPE['code'], EL_TYPE['span']]\r\n        },\r\n        convertRule: function (node) {\r\n            return '```\\n';\r\n        },\r\n        endRule: function (node) {\r\n            return '\\n```\\n';\r\n        }\r\n    },\r\n    [EL_TYPE['code']]: {\r\n        filterRule: {\r\n            attribute: [],\r\n            children: {\r\n                include: [EL_TYPE['textNode']],\r\n                filter: true\r\n            }\r\n        },\r\n        convertRule: function (node) {\r\n            return `${node.parentNode.type === EL_TYPE['pre'] ? '' : '`'}`;\r\n        },\r\n        endRule: function (node) {\r\n            return `${node.parentNode.type === EL_TYPE['pre'] ? '' : '`'}`;\r\n        }\r\n    },\r\n    [EL_TYPE['span']]: DEFAULT_RULE.doubleToken,\r\n    [EL_TYPE['audio']]: DEFAULT_RULE.doubleToken,\r\n    [EL_TYPE['aside']]: DEFAULT_RULE.doubleToken,\r\n    [EL_TYPE['video']]: DEFAULT_RULE.doubleToken,\r\n    [EL_TYPE['strong']]: {\r\n        filterRule: {\r\n            attribute: [],\r\n            children: [EL_TYPE['all_element']]\r\n        },\r\n        convertRule: function (node) {\r\n            return ` **`;\r\n        },\r\n        endRule: function (node) {\r\n            return `** `;\r\n        }\r\n    },\r\n    [EL_TYPE['script']]: DEFAULT_RULE.doubleToken,\r\n    [EL_TYPE['button']]: DEFAULT_RULE.doubleToken,\r\n    [EL_TYPE['article']]: DEFAULT_RULE.doubleToken,\r\n    [EL_TYPE['blockquote']]: {\r\n        filterRule: {\r\n            attribute: [],\r\n            children: [EL_TYPE['all_element']]\r\n        },\r\n        childNodeRule: {\r\n            pre: function (node) {\r\n                return `>   `;\r\n            },\r\n            post: function (node, child, child_post) {\r\n                if (child.type !== EL_TYPE['blockquote'] || child.isLast)\r\n                    child_post = _tools_tools__WEBPACK_IMPORTED_MODULE_0__[\"Tools\"].removeLastLS(child_post);\r\n                if (child.isLast)\r\n                    child_post = _tools_tools__WEBPACK_IMPORTED_MODULE_0__[\"Tools\"].removeLastLS(child_post);\r\n                return child_post;\r\n            }\r\n        },\r\n        convertRule: function (node) {\r\n            return ``;\r\n        },\r\n        endRule: function (node) {\r\n            let end = LS, next = node.parentNode.children[node.index + 1];\r\n            if (!next || next.type !== EL_TYPE['blockquote']) end += LS;\r\n            return end;\r\n        }\r\n    },\r\n    [EL_TYPE['h1']]: {\r\n        filterRule: {\r\n            attribute: ['id'],\r\n            children: {\r\n                include: [EL_TYPE['textNode']],\r\n                filter: true\r\n            }\r\n        },\r\n        convertRule: function (node) {\r\n            return `# `;\r\n        },\r\n        endRule: function (node) {\r\n            let str, id = node.attribute.id;\r\n            if (_tools_tools__WEBPACK_IMPORTED_MODULE_0__[\"Tools\"].typeOf(id) === _tools_tools__WEBPACK_IMPORTED_MODULE_0__[\"Tools\"].TYPE.String &&\r\n                id.length > 0) {\r\n                str = ` {#${node.attribute.id}}\\n`;\r\n            } else {\r\n                str = '\\n';\r\n            }\r\n            return str;\r\n        }\r\n    },\r\n    [EL_TYPE['h2']]: {\r\n        filterRule: {\r\n            attribute: ['id'],\r\n            children: {\r\n                include: [EL_TYPE['textNode']],\r\n                filter: true\r\n            }\r\n        },\r\n        convertRule: function (node) {\r\n            return `## `;\r\n        },\r\n        endRule: function (node) {\r\n            let str, id = node.attribute.id;\r\n            if (_tools_tools__WEBPACK_IMPORTED_MODULE_0__[\"Tools\"].typeOf(id) === _tools_tools__WEBPACK_IMPORTED_MODULE_0__[\"Tools\"].TYPE.String &&\r\n                id.length > 0) {\r\n                str = ` {#${node.attribute.id}}\\n`;\r\n            } else {\r\n                str = '\\n';\r\n            }\r\n            return str;\r\n        }\r\n    },\r\n    [EL_TYPE['h3']]: {\r\n        filterRule: {\r\n            attribute: ['id'],\r\n            children: {\r\n                include: [EL_TYPE['textNode']],\r\n                filter: true\r\n            }\r\n        },\r\n        convertRule: function (node) {\r\n            return `### `;\r\n        },\r\n        endRule: function (node) {\r\n            let str, id = node.attribute.id;\r\n            if (_tools_tools__WEBPACK_IMPORTED_MODULE_0__[\"Tools\"].typeOf(id) === _tools_tools__WEBPACK_IMPORTED_MODULE_0__[\"Tools\"].TYPE.String &&\r\n                id.length > 0) {\r\n                str = ` {#${node.attribute.id}}\\n`;\r\n            } else {\r\n                str = '\\n';\r\n            }\r\n            return str;\r\n        }\r\n    },\r\n    [EL_TYPE['h4']]: {\r\n        filterRule: {\r\n            attribute: [],\r\n            children: [EL_TYPE['all_element']]\r\n        },\r\n        convertRule: function (node) {\r\n            return `#### `;\r\n        },\r\n        endRule: function (node) {\r\n            return `\\n`;\r\n        }\r\n    },\r\n    [EL_TYPE['h5']]: {\r\n        filterRule: {\r\n            attribute: [],\r\n            children: [EL_TYPE['all_element']]\r\n        },\r\n        convertRule: function (node) {\r\n            return `##### `;\r\n        },\r\n        endRule: function (node) {\r\n            return `\\n`;\r\n        }\r\n    },\r\n    [EL_TYPE['h6']]: {\r\n        filterRule: {\r\n            attribute: [],\r\n            children: [EL_TYPE['all_element']]\r\n        },\r\n        convertRule: function (node) {\r\n            return `###### `;\r\n        },\r\n        endRule: function (node) {\r\n            return `\\n`;\r\n        }\r\n    },\r\n    [EL_TYPE['figure']]: DEFAULT_RULE.doubleToken,\r\n    [EL_TYPE['figcaption']]: DEFAULT_RULE.doubleToken,\r\n    [EL_TYPE['br']]: {\r\n        filterRule: {\r\n            attribute: [],\r\n            children: []\r\n        },\r\n        convertRule: function (node) {\r\n            return `\\n`;\r\n        },\r\n        endRule: function (node) {\r\n            return ``;\r\n        }\r\n    },\r\n    [EL_TYPE['hr']]: {\r\n        filterRule: {\r\n            attribute: [],\r\n            children: []\r\n        },\r\n        convertRule: function (node) {\r\n            return `---\\n`;\r\n        },\r\n        endRule: function (node) {\r\n            return ``;\r\n        }\r\n    },\r\n    [EL_TYPE['img']]: {\r\n        filterRule: {\r\n            attribute: [{name: 'src', alias: ['data-src']}, {name: 'title'}],\r\n            children: []\r\n        },\r\n        convertRule: function (node) {\r\n            return '![';\r\n        },\r\n        endRule: function (node) {\r\n            const attr = node.attribute;\r\n            return `](${attr['src'] || ''} \"${attr['title'] || ''}\")\\n`;\r\n        }\r\n    },\r\n    [EL_TYPE['link']]: DEFAULT_RULE.singleToken,\r\n    [EL_TYPE['!--']]: DEFAULT_RULE.singleToken,\r\n    [EL_TYPE['input']]: DEFAULT_RULE.singleToken,\r\n    [EL_TYPE['meta']]: DEFAULT_RULE.singleToken,\r\n    [EL_TYPE['!----']]: DEFAULT_RULE.singleToken,\r\n};\r\n\r\n/**\r\n * 全局配置，目前主要用于处理注释\r\n */\r\nconst GLOBAL_CONFIG = {\r\n    excludeElement: {\r\n        [EL_TYPE['!--']]: {\r\n            option: 2                                   // option: 1: 过滤掉所有该类型的标签, 2: 移除该标签对应的整个节点\r\n        },\r\n        [EL_TYPE['!----']]: {\r\n            option: 2\r\n        },\r\n        [EL_TYPE['htmlNode']]: {\r\n            option: 2\r\n        }\r\n    }\r\n};\r\n\r\nconst CONSOLE_TYPE = {\r\n    success: 'color: #67C23A;font-size: 12px',\r\n    error: 'color: #F56C6C;font-size: 12px',\r\n    warn: 'color: #E6A23A;font-size: 12px',\r\n    info: 'color: #909399;font-size: 12px'\r\n};\r\n\r\n/**\r\n * 添加一个HTML元素到EL_TYPE和TOKEN_RULE中\r\n * @param name - HTML元素标签名\r\n * @param allowNest - 元素是否允许嵌套标签，即是否为空标签\r\n * @param rule - 可选配置的规则，默认使用DEFAULT_RULE\r\n * @return {Error|boolean}\r\n */\r\nfunction addToken(name, allowNest = true, rule) {\r\n    let elInfo = allowNest ? nestingEl : emptyEl;\r\n    rule = rule || (allowNest ? DEFAULT_RULE.doubleToken : DEFAULT_RULE.singleToken);\r\n    elInfo.index += 2;\r\n    if (!EL_TYPE[name]) {\r\n        EL_TYPE[name] = elInfo.index;\r\n        TOKEN_RULE[EL_TYPE[name]] = rule;\r\n    }\r\n    else {\r\n        return new Error(`HTMLElement: ${name} already exist!`);\r\n    }\r\n    return true;\r\n}\r\n\r\n\r\n\n\n//# sourceURL=webpack://MdReverse/./src/lib/config.js?");

/***/ }),

/***/ "./src/lib/lexer.js":
/*!**************************!*\
  !*** ./src/lib/lexer.js ***!
  \**************************/
/*! exports provided: Lexer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Lexer\", function() { return Lexer; });\n/* harmony import */ var _tools_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tools/tools */ \"./src/lib/tools/tools.js\");\n\r\n\r\nfunction Lexer() {\r\n}\r\n\r\nObject.defineProperties(Lexer.prototype, {\r\n    analysis: {\r\n        value: analysis\r\n    }\r\n});\r\n\r\n/**\r\n * 分解传入的HTML字符串\r\n * @param str - HTML字符串\r\n * @return {Array}\r\n */\r\nfunction analysis(str) {\r\n    str = _tools_tools__WEBPACK_IMPORTED_MODULE_0__[\"Tools\"].trim(str);\r\n    console.time('lexical analysis');\r\n    const result = [];\r\n    let stack = [], char, start = 0, end = 0;\r\n    for (let i = 0, len = str.length, depth; i < len; i++) {\r\n        depth = stack.length;\r\n        char = str[i];\r\n        switch (char) {\r\n            case '<':\r\n                stack.push(char);\r\n                if (depth === 0) {\r\n                    start = i;\r\n                    // 截取HTML标签之间的文本\r\n                    if (start - end > 1 && !_tools_tools__WEBPACK_IMPORTED_MODULE_0__[\"Tools\"].isEmpty(str, end + 1, start - 1))\r\n                        result.push(str.slice(end + 1, start));\r\n                }\r\n                break;\r\n            case '>':\r\n                stack.pop();\r\n                if (depth === 1) {\r\n                    end = i;\r\n                    result.push(str.slice(start, end + 1));\r\n                }\r\n                break;\r\n            default:\r\n                if (i === len - 1) {\r\n                    result.push(str.slice(end, len));\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    console.timeEnd('lexical analysis');\r\n    return result;\r\n}\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://MdReverse/./src/lib/lexer.js?");

/***/ }),

/***/ "./src/lib/markdown.js":
/*!*****************************!*\
  !*** ./src/lib/markdown.js ***!
  \*****************************/
/*! exports provided: Markdown */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Markdown\", function() { return Markdown; });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ \"./src/lib/config.js\");\n\r\n\r\nfunction Markdown() {\r\n}\r\n\r\nObject.defineProperties(Markdown.prototype, {\r\n    translate: {\r\n        value: translate\r\n    }\r\n});\r\n\r\nfunction translate(vdomt) {\r\n    const stack = [];\r\n    let curNode = vdomt, children, result = '';\r\n    vdomt._pos = 0;\r\n    console.time('markdown text translate');\r\n    while (curNode !== vdomt || curNode.children.length > curNode._pos) {\r\n        if (curNode.position === 1) {                                   // 非空元素\r\n            children = curNode.children;\r\n\r\n            if (curNode !== stack[stack.length - 1]) {                  // curNode在栈顶不存在，说明curNode是第一次被执行\r\n                curNode['_pos'] = 0;\r\n                stack.push(curNode);                                    // 第一次执行将其加入栈中\r\n                result += convertToken(curNode, 'head');\r\n            }\r\n            if (children && children.length > curNode._pos) {           // 非空且有子节点的元素，将子节点取出一个进行下一次循环\r\n                curNode = children[curNode._pos++];                     // 设置下一次循环的节点\r\n            } else {                                                    // 非空无子节点的元素，弹出栈\r\n                stack.pop();\r\n                result += convertToken(curNode, 'tail');\r\n\r\n                curNode = stack[stack.length - 1];                      // 设置下一次循环的节点\r\n            }\r\n        } else if (curNode.position === 3) {                            // 空元素或文本节点\r\n            result += convertToken(curNode, 'headtail');\r\n\r\n            curNode = stack[stack.length - 1];                          // 设置下一次循环的节点\r\n        }\r\n    }\r\n    console.timeEnd('markdown text translate');\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n *\r\n * @param node\r\n * @param pos {'head' | 'tail' | 'headtail'} - 应用开始/结束的转换规则\r\n */\r\nfunction convertToken(node, pos) {\r\n    let rule = _config__WEBPACK_IMPORTED_MODULE_0__[\"TOKEN_RULE\"][node.type], parNode = node.parentNode, parRule = parNode && _config__WEBPACK_IMPORTED_MODULE_0__[\"TOKEN_RULE\"][parNode.type];\r\n    switch (pos) {\r\n        case 'head':\r\n            let pre = undefined;\r\n\r\n            if (parNode && parNode.child_pre) pre = parNode.child_pre;\r\n            if (rule.childNodeRule) {\r\n                if (rule.childNodeRule.pre)\r\n                    pre = (pre === undefined ? '' : pre) + rule.childNodeRule.pre(node);\r\n            }\r\n\r\n            if (pre) node['child_pre'] = pre;\r\n            return rule.convertRule(node);\r\n        case 'tail':\r\n            // console.log(`[${node.tag}]: ${pos}`);\r\n            let end = rule.endRule(node);\r\n            if (parRule && parRule.childNodeRule && parRule.childNodeRule.post) {\r\n               end = parRule.childNodeRule.post(parNode, node, end);\r\n            }\r\n            return end;\r\n        case 'headtail':\r\n        default:\r\n            // console.log(`[${node.tag}]: ${pos}`);\r\n            return rule.convertRule(node) + rule.endRule(node);\r\n    }\r\n}\r\n\r\n\r\n\n\n//# sourceURL=webpack://MdReverse/./src/lib/markdown.js?");

/***/ }),

/***/ "./src/lib/mdReverse.js":
/*!******************************!*\
  !*** ./src/lib/mdReverse.js ***!
  \******************************/
/*! exports provided: MdReverse, TablePlugin, StrikethroughPlugin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MdReverse\", function() { return MdReverse; });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ \"./src/lib/config.js\");\n/* harmony import */ var _plugins_table__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./plugins/table */ \"./src/lib/plugins/table.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TablePlugin\", function() { return _plugins_table__WEBPACK_IMPORTED_MODULE_1__[\"TablePlugin\"]; });\n\n/* harmony import */ var _plugins_strikethrough__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./plugins/strikethrough */ \"./src/lib/plugins/strikethrough.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"StrikethroughPlugin\", function() { return _plugins_strikethrough__WEBPACK_IMPORTED_MODULE_2__[\"StrikethroughPlugin\"]; });\n\n/* harmony import */ var _lexer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lexer */ \"./src/lib/lexer.js\");\n/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./parser */ \"./src/lib/parser.js\");\n/* harmony import */ var _vdomt__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./vdomt */ \"./src/lib/vdomt.js\");\n/* harmony import */ var _markdown__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./markdown */ \"./src/lib/markdown.js\");\n/* harmony import */ var _tools_tools__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./tools/tools */ \"./src/lib/tools/tools.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction MdReverse() {\r\n    this.HTML = '';\r\n}\r\n\r\nObject.defineProperties(MdReverse.prototype, {\r\n    toMarkdown: {\r\n        value: toMarkdown\r\n    },\r\n    use: {\r\n        value: use\r\n    }\r\n});\r\n\r\n/**\r\n * 将HTML字符串转换为Markdown格式\r\n * @param htmlStr\r\n * @return {String}\r\n */\r\nfunction toMarkdown(htmlStr) {\r\n    this.HTML = _tools_tools__WEBPACK_IMPORTED_MODULE_7__[\"Tools\"].trim(htmlStr);\r\n    const lexer = new _lexer__WEBPACK_IMPORTED_MODULE_3__[\"Lexer\"](), parser = new _parser__WEBPACK_IMPORTED_MODULE_4__[\"Parser\"](), vdomtree = new _vdomt__WEBPACK_IMPORTED_MODULE_5__[\"VDOMTree\"](), md = new _markdown__WEBPACK_IMPORTED_MODULE_6__[\"Markdown\"]();\r\n    let result = lexer.analysis(this.HTML);\r\n    result = parser.analysis(result);\r\n    result = vdomtree.build(result);\r\n    result = md.translate(result);\r\n    return result;\r\n}\r\n\r\nfunction use(plugin) {\r\n    plugin(_config__WEBPACK_IMPORTED_MODULE_0__[\"addToken\"], _config__WEBPACK_IMPORTED_MODULE_0__[\"EL_TYPE\"], _config__WEBPACK_IMPORTED_MODULE_0__[\"DEFAULT_RULE\"]);\r\n    return this;\r\n}\r\n\r\n\n\n//# sourceURL=webpack://MdReverse/./src/lib/mdReverse.js?");

/***/ }),

/***/ "./src/lib/parser.js":
/*!***************************!*\
  !*** ./src/lib/parser.js ***!
  \***************************/
/*! exports provided: Parser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Parser\", function() { return Parser; });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ \"./src/lib/config.js\");\n/* harmony import */ var _tools_tools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tools/tools */ \"./src/lib/tools/tools.js\");\n\r\n\r\n\r\nfunction Parser() {\r\n\r\n}\r\n\r\nObject.defineProperties(Parser.prototype, {\r\n    analysis: {\r\n        value: analysis\r\n    }\r\n});\r\n\r\nfunction analysis(tokenArr) {\r\n    if (!_tools_tools__WEBPACK_IMPORTED_MODULE_1__[\"Tools\"].typeIs(tokenArr, _tools_tools__WEBPACK_IMPORTED_MODULE_1__[\"Tools\"].TYPE.Array)) return;\r\n\r\n    console.time('syntactic analysis');\r\n    const result = [];\r\n    let tag, type, attr, pos, content, token, separator, obj;\r\n    for (let i = tokenArr.length; i--;) {\r\n        token = tokenArr[i];\r\n        separator = indexOfTypeSeparator(tokenArr[i]);\r\n\r\n        tag     = separator ? token.slice(separator.start, separator.end) : 'textNode';                 // HTML标签名\r\n        type    = _config__WEBPACK_IMPORTED_MODULE_0__[\"EL_TYPE\"][tag] || _config__WEBPACK_IMPORTED_MODULE_0__[\"EL_TYPE\"]['htmlNode'];                                                  // tag对应类型\r\n        pos     = type & 1 ? 3 : (separator.start === 1 ? 1 : 2);                                       // 标识标签位置类型（开标签: 1, 闭标签: 2, 空元素: 3）\r\n        attr    = pos & 1 ? filterAttribute(token, _config__WEBPACK_IMPORTED_MODULE_0__[\"TOKEN_RULE\"][type].filterRule.attribute) : null;       // HTML标签属性键值对\r\n        content = type === 1 ? token : null;                                                            // 文本节点特有，保存节点内容\r\n\r\n        obj = {\r\n            tag: tag,\r\n            type: type,\r\n            position: pos,\r\n        };\r\n        if (attr)       obj['attribute']    = attr;\r\n        if (content)    obj['content']      = content;\r\n\r\n        result.push(obj);\r\n    }\r\n    console.timeEnd('syntactic analysis');\r\n    return result;\r\n}\r\n\r\n/**\r\n * 过滤掉HTML标签上不必要的属性\r\n * @param str\r\n * @param exclude - 需要保留的属性，默认全部去除\r\n * @return {null} - 返回保留的属性键值对，如果有的话\r\n */\r\nfunction filterAttribute(str, exclude) {\r\n    if (!exclude || exclude.length <= 0) return null;\r\n\r\n    const avps = str.match(_config__WEBPACK_IMPORTED_MODULE_0__[\"REGEXP\"].attribute) || [];\r\n    let avp, result = {};\r\n    for (let i = avps.length; i--;) {\r\n        avp = avps[i].split('=');\r\n        for (let j = exclude.length, item; j--;) {\r\n            item = exclude[j];\r\n            let type = _tools_tools__WEBPACK_IMPORTED_MODULE_1__[\"Tools\"].typeOf(item);\r\n            if (type === _tools_tools__WEBPACK_IMPORTED_MODULE_1__[\"Tools\"].TYPE.String) {\r\n                if (item === avp[0]) {\r\n                    result[avp[0]] = avp[1].slice(1, avp[1].length - 1);\r\n                    break;\r\n                }\r\n            } else if (type === _tools_tools__WEBPACK_IMPORTED_MODULE_1__[\"Tools\"].TYPE.Object) {\r\n                if (item.name === avp[0] ||\r\n                    (item.alias && item.alias.includes(avp[0]))) {\r\n                    result[avp[0]] = avp[1].slice(1, avp[1].length - 1);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        // if (exclude.includes(avp[0])) {\r\n        //     result[avp[0]] = avp[1].slice(1, avp[1].length - 1);\r\n        // }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * 搜索标签类型的分隔符（空白符或`>`）\r\n * @param str\r\n * @returns {*} - 不属于HTML标签返回null\r\n */\r\nfunction indexOfTypeSeparator(str) {\r\n    let start = str[1] === '/' ? 2 : 1,\r\n        end = str.indexOf('<'),\r\n        target = str[end];\r\n    while (target && target !== ' ' && target !== '>') {\r\n        target = str[++end];\r\n    }\r\n\r\n    return target ? {\r\n        start,\r\n        end\r\n    } : null;\r\n}\r\n\r\n\r\n\n\n//# sourceURL=webpack://MdReverse/./src/lib/parser.js?");

/***/ }),

/***/ "./src/lib/plugins/strikethrough.js":
/*!******************************************!*\
  !*** ./src/lib/plugins/strikethrough.js ***!
  \******************************************/
/*! exports provided: StrikethroughPlugin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"StrikethroughPlugin\", function() { return StrikethroughPlugin; });\n/* harmony import */ var _tools_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tools/tools */ \"./src/lib/tools/tools.js\");\n\r\n\r\n/**\r\n * @description [Strikethrough扩展语法]{@link https://www.markdownguide.org/extended-syntax/#strikethrough}\r\n * | 参数 | 描述 |\r\n * | ---- | ---- |\r\n * | teleNum | 业务号 |\r\n * @param addToken\r\n * @param EL_TYPE\r\n * @constructor\r\n */\r\nfunction StrikethroughPlugin(addToken, EL_TYPE) {\r\n    addToken('del', true, {\r\n        filterRule: {\r\n            children: [EL_TYPE['all_element']]\r\n        },\r\n        convertRule: function (node) {\r\n            return ' ~~';\r\n        },\r\n        endRule: function (node) {\r\n            return `~~ `;\r\n        }\r\n    })\r\n}\r\n\r\n\r\n\n\n//# sourceURL=webpack://MdReverse/./src/lib/plugins/strikethrough.js?");

/***/ }),

/***/ "./src/lib/plugins/table.js":
/*!**********************************!*\
  !*** ./src/lib/plugins/table.js ***!
  \**********************************/
/*! exports provided: TablePlugin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TablePlugin\", function() { return TablePlugin; });\n/* harmony import */ var _tools_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tools/tools */ \"./src/lib/tools/tools.js\");\n\r\n\r\n/**\r\n * [Table扩展语法]{@link https://www.markdownguide.org/extended-syntax/#tables}\r\n * @param addToken\r\n * @param EL_TYPE\r\n * @constructor\r\n */\r\nfunction TablePlugin(addToken, EL_TYPE) {\r\n    addToken('td', true, {\r\n        filterRule: {\r\n            children: [EL_TYPE['all_element']]\r\n        },\r\n        convertRule: function (node) {\r\n            return ' ';\r\n        },\r\n        endRule: function (node) {\r\n            return ` |`;\r\n        }\r\n    });\r\n    addToken('th', true, {\r\n        filterRule: {\r\n            attribute: [{name: 'style'}],\r\n            children: [EL_TYPE['all_element']]\r\n        },\r\n        convertRule: function (node) {\r\n            return ' ';\r\n        },\r\n        endRule: function (node) {\r\n            return ` |`;\r\n        }\r\n    });\r\n    addToken('tr', true, {\r\n        filterRule: {\r\n            children: [EL_TYPE['all_element']]\r\n        },\r\n        convertRule: function (node) {\r\n            return '|';\r\n        },\r\n        endRule: function (node) {\r\n            return '\\n';\r\n        }\r\n    });\r\n    addToken('table', true, {\r\n        filterRule: {\r\n            children: [EL_TYPE['all_element']]\r\n        },\r\n        convertRule: function (node) {\r\n            return '';\r\n        },\r\n        endRule: function (node) {\r\n            return '\\n';\r\n        }\r\n    });\r\n    addToken('thead', true, {\r\n        filterRule: {\r\n            children: [EL_TYPE['all_element']]\r\n        },\r\n        convertRule: function (node) {\r\n            return '';\r\n        },\r\n        endRule: function (node) {\r\n            const ths = node.children[0].children;\r\n            let str = '|', hyphens = '----', colon = ':', ws = ' ';\r\n            for (let i = 0, len = ths.length, th, cssObj; i < len; i++) {\r\n                th = ths[i];\r\n                cssObj = _tools_tools__WEBPACK_IMPORTED_MODULE_0__[\"Tools\"].formatCSS(th.attribute.style);\r\n                switch (cssObj['text-align']) {\r\n                    case 'left':\r\n                        str += ws + colon + hyphens + ws;\r\n                        break;\r\n                    case 'center':\r\n                        str += ws + colon + hyphens + colon + ws;\r\n                        break;\r\n                    case 'right':\r\n                        str += ws + hyphens + colon + ws;\r\n                        break;\r\n                    default:\r\n                        str += ws + hyphens + ws;\r\n                }\r\n                str += '|';\r\n            }\r\n            return `${str}\\n`;\r\n        }\r\n    });\r\n    addToken('tbody', true, {\r\n        filterRule: {\r\n            children: [EL_TYPE['all_element']]\r\n        },\r\n        convertRule: function (node) {\r\n            return '';\r\n        },\r\n        endRule: function (node) {\r\n            return '';\r\n        }\r\n    });\r\n}\r\n\r\n\r\n\n\n//# sourceURL=webpack://MdReverse/./src/lib/plugins/table.js?");

/***/ }),

/***/ "./src/lib/tools/tools.js":
/*!********************************!*\
  !*** ./src/lib/tools/tools.js ***!
  \********************************/
/*! exports provided: Tools */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Tools\", function() { return Tools; });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config */ \"./src/lib/config.js\");\n\r\n\r\nconst TYPE = {\r\n    Array: '[object Array]',\r\n    Boolean: '[object Boolean]',\r\n    BigInt: '[object BigInt]',\r\n    Date: '[object Date]',\r\n    Error: '[object Error]',\r\n    Function: '[object Function]',\r\n    Number: '[object Number]',\r\n    Null: '[object Null]',\r\n    Math: '[object Math]',\r\n    Object: '[object Object]',\r\n    RegExp: '[object RegExp]',\r\n    String: '[object String]',\r\n    Symbol: '[object Symbol]',\r\n    Undefined: '[object Undefined]',\r\n    UnKnown: '[object Unknown]',\r\n};\r\n\r\nfunction _Tools() {\r\n}\r\n\r\nObject.defineProperties(_Tools.prototype, {\r\n    trim: {\r\n        value: trim\r\n    },\r\n    isEmpty: {\r\n        value: isEmpty\r\n    },\r\n    hasWhiteSpace: {\r\n        value: hasWhiteSpace\r\n    },\r\n    compressWs: {\r\n        value: compressWs\r\n    },\r\n    TYPE: {\r\n        value: TYPE\r\n    },\r\n    typeOf: {\r\n        value: typeOf\r\n    },\r\n    typeIs: {\r\n        value: typeIs\r\n    },\r\n    lastHasLS: {\r\n        value: lastHasLS\r\n    },\r\n    removeLastLS: {\r\n        value: removeLastLS\r\n    },\r\n    formatCSS: {\r\n        value: formatCSS\r\n    }\r\n});\r\n\r\n/**\r\n * 去除字符串头尾空白符（正则中的不可见字符）\r\n * @param str - 指定字符串\r\n * @param start - 开始位置默认字符串开头\r\n * @param end - 结束位置默认字符串结尾\r\n * @returns {string} - 返回新的字符串不会影响原始string\r\n */\r\nfunction trim(str, start = 0, end = str.length - 1) {\r\n    const ws = _config__WEBPACK_IMPORTED_MODULE_0__[\"REGEXP\"].whitespace;\r\n    while (ws.test(str[start]) && start <= end) start++;\r\n    while (ws.test(str[end]) && end >= start) end--;\r\n\r\n    return start > end ? '' : str.slice(start, end + 1);\r\n}\r\n\r\nfunction compressWs(str) {\r\n    const ws = _config__WEBPACK_IMPORTED_MODULE_0__[\"REGEXP\"].whitespace;\r\n    let start = ws.test(str[0]), end = ws.test(str[str.length - 1]);\r\n    str = trim(str);\r\n\r\n    return `${start ? ' ' : ''}${str}${end ? ' ' : ''}`\r\n}\r\n\r\n\r\n/**\r\n * 判断是否为空白串\r\n * @param str\r\n * @param start\r\n * @param end\r\n * @returns {boolean}\r\n */\r\nfunction isEmpty(str, start = 0, end = str.length - 1) {\r\n    const ws = _config__WEBPACK_IMPORTED_MODULE_0__[\"REGEXP\"].whitespace;\r\n    for (;start <= end; start++) {\r\n        if (!ws.test(str[start])) return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/**\r\n * @deprecated\r\n * @param str\r\n * @param start\r\n * @param end\r\n * @returns {{headNum: number, tailNum: number, start: number, end: number}}\r\n */\r\nfunction hasWhiteSpace(str, start = 0, end = str.length - 1) {\r\n    const ws = _config__WEBPACK_IMPORTED_MODULE_0__[\"REGEXP\"].whitespace;\r\n    let head = start, tail = end;\r\n    while (ws.test(str[start]) && head <= tail) head++;\r\n    while (ws.test(str[end]) && tail >= head) tail--;\r\n\r\n    return {\r\n        headNum: head - start,\r\n        tailNum: end - tail,\r\n        start: head,\r\n        end: tail\r\n    }\r\n}\r\n\r\nfunction typeOf(variable) {\r\n    return Object.prototype.toString.call(variable);\r\n}\r\n\r\n/**\r\n * 判断变量是否为`typeArray`中的某一个类型\r\n * @param variable - 待判断的变量\r\n * @param typeArray - 预选类型\r\n * @return {boolean} - `variable`的类型存在与`typeArray`中返回`true`，不存在返回`false`\r\n */\r\nfunction typeIs(variable, ...typeArray) {\r\n    const varType = typeOf(variable);\r\n    for (let i = typeArray.length; i--;) {\r\n        if (varType === typeArray[i]) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * 判断字符串末尾是否有换行符\r\n * @param str\r\n */\r\nfunction lastHasLS(str) {\r\n    let CR, LF, max, diff;\r\n    CR = str.lastIndexOf(_config__WEBPACK_IMPORTED_MODULE_0__[\"LineSeparator\"].CR);\r\n    LF = str.lastIndexOf(_config__WEBPACK_IMPORTED_MODULE_0__[\"LineSeparator\"].LF);\r\n    max = CR > LF ? CR : LF;\r\n    diff = LF - CR;\r\n    if (max !== str.length - 1) {\r\n        return false;\r\n    } else {\r\n        if (Math.abs(diff) > 1 || diff === -1) {\r\n            return {\r\n                type: max === CR ? 'CR' : 'LF'\r\n            }\r\n        } else if (diff === 1) {\r\n            return {\r\n                type: 'CRLF'\r\n            }\r\n        }\r\n\r\n    }\r\n   return false;\r\n}\r\n\r\n/**\r\n * 移除字符串中的最后一个行分割符{@link LineSeparator}，如果存在的话。\r\n * @param str\r\n */\r\nfunction removeLastLS(str) {\r\n    let lastLS = lastHasLS(str);\r\n    switch (lastLS.type) {\r\n        case 'CR':\r\n        case 'LF':\r\n            str = str.slice(0, -1);\r\n            break;\r\n        case 'CRLF':\r\n            str = str.slice(0, -2);\r\n            break;\r\n    }\r\n    return str;\r\n}\r\n\r\n/**\r\n * 格式化css字符串，将其转为json对象。\r\n * @param cssText - css字符串\r\n * @return {Object | Error}\r\n */\r\nfunction formatCSS(cssText) {\r\n    let cssObj = {}, arr;\r\n    if (typeOf(cssText) === TYPE.String) {\r\n        arr = cssText.split(/[:;]/);\r\n        for (let i = 0, len = arr.length; i < len; i += 2) {\r\n            cssObj[trim(arr[i])] = trim(arr[i + 1]);\r\n        }\r\n\r\n        return cssObj;\r\n    } else {\r\n        return new Error('cssText not String type');\r\n    }\r\n}\r\n\r\nvar Tools = new _Tools();\r\n\n\n//# sourceURL=webpack://MdReverse/./src/lib/tools/tools.js?");

/***/ }),

/***/ "./src/lib/vdomt.js":
/*!**************************!*\
  !*** ./src/lib/vdomt.js ***!
  \**************************/
/*! exports provided: VDOMTree */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"VDOMTree\", function() { return VDOMTree; });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ \"./src/lib/config.js\");\n\r\n\r\nfunction VDOMTree() {\r\n\r\n}\r\n\r\nObject.defineProperties(VDOMTree.prototype, {\r\n    build: {\r\n        value: build\r\n    }\r\n});\r\n\r\n/**\r\n * 生成虚拟DOM树\r\n */\r\nfunction build(tokenArr) {\r\n    const rootNode = {tag: 'root', type: _config__WEBPACK_IMPORTED_MODULE_0__[\"EL_TYPE\"]['rootNode'], position: 1}, stack = [rootNode];\r\n    let parNode = rootNode, curNode, children, childrenLen, filterChild = [_config__WEBPACK_IMPORTED_MODULE_0__[\"EL_TYPE\"]['all_element']];\r\n\r\n    console.time('virtual dom tree build');\r\n    while ((curNode = tokenArr.pop())) {\r\n        // 构建DOM树\r\n        if (curNode.position === 1) {                                                                       // 开标签\r\n            if (!filterChildren(tokenArr, curNode, filterChild)) {                                          // curNode是否是父节点允许的子节点类型\r\n                continue;\r\n            }\r\n            stack.push(curNode);\r\n            parNode = curNode;\r\n            filterChild = _config__WEBPACK_IMPORTED_MODULE_0__[\"TOKEN_RULE\"][parNode.type].filterRule.children;\r\n\r\n        } else if (curNode.position === 2) {                                                                // 闭标签\r\n            if (curNode.type !== stack[stack.length - 1].type) {\r\n                throw new Error(`opening tag ${stack[stack.length - 1].tag}, closing tag ${curNode.tag}`);\r\n            }\r\n            curNode = stack.pop();\r\n            parNode = stack[stack.length - 1];\r\n\r\n            children = curNode.children;\r\n            childrenLen = children ? children.length : 0;\r\n            if (childrenLen > 0) children[childrenLen - 1]['isLast'] = true;                                // 给最后一个子节点添加标记\r\n\r\n            filterChild = _config__WEBPACK_IMPORTED_MODULE_0__[\"TOKEN_RULE\"][parNode.type].filterRule.children;\r\n\r\n            if (_config__WEBPACK_IMPORTED_MODULE_0__[\"GLOBAL_CONFIG\"].excludeElement[curNode.type]) {                                               // 当前节点为注释节点跳过\r\n                if (_config__WEBPACK_IMPORTED_MODULE_0__[\"GLOBAL_CONFIG\"].excludeElement[curNode.type].option === 2) continue;\r\n            }\r\n            if (!parNode.children) parNode.children = [];\r\n\r\n            curNode['parentNode']   = parNode;\r\n            curNode['index']        = parNode.children.length;\r\n\r\n            parNode.children.push(curNode);\r\n        } else if (curNode.position === 3) {                                                                // 空标签或文本节点\r\n            if (!parNode.children) parNode.children = [];\r\n\r\n            curNode['parentNode']   = parNode;\r\n            curNode['index']        = parNode.children.length;\r\n\r\n            parNode.children.push(curNode);\r\n        }\r\n\r\n        // 设置是否属于代码块的标识\r\n        try {\r\n            if (curNode.type === _config__WEBPACK_IMPORTED_MODULE_0__[\"EL_TYPE\"]['pre'] ||\r\n                curNode.type === _config__WEBPACK_IMPORTED_MODULE_0__[\"EL_TYPE\"]['code'] ||\r\n                (curNode.parentNode && curNode.parentNode.isCode)) {\r\n                curNode['isCode'] = true;\r\n            }\r\n        } catch (e) {\r\n            console.error('asd', e, curNode, curNode.parentNode);\r\n        }\r\n\r\n    }\r\n    console.timeEnd('virtual dom tree build');\r\n    return rootNode;\r\n}\r\n\r\n/**\r\n * 判断该节点（node）是否是其父节点的过滤条件（filterRule）所允许的节点\r\n * @param tokens\r\n * @param node\r\n * @param filterRule\r\n * @returns {boolean}\r\n */\r\nfunction filterChildren(tokens, node, filterRule) {\r\n\r\n    let rule = filterRule, filter;\r\n    if (!Array.isArray(filterRule)) {\r\n        rule = filterRule.include;\r\n        filter = filterRule.filter;\r\n    }\r\n\r\n    if (rule.includes(_config__WEBPACK_IMPORTED_MODULE_0__[\"EL_TYPE\"]['all_element']) || rule.includes(node.type)) return true;\r\n\r\n    filterTag(tokens, node, rule, filter);\r\n\r\n    return false;\r\n}\r\n\r\n/**\r\n * 将curNode子节点中符合规则（rule）的token过滤掉\r\n * @param tokenArr\r\n * @param curNode\r\n * @param rule\r\n * @param filter    - 是否只过滤符合rule的节点\r\n *                  - true: 只过滤符合rule的节点\r\n *                  - false: 过滤所有子节点\r\n */\r\nfunction filterTag(tokenArr, curNode, rule, filter = false) {\r\n    let node, sameCount = 0, start = tokenArr.length, end = start;\r\n    if (filter) {\r\n        for (let i = tokenArr.length; i--;) {\r\n            node = tokenArr[i];\r\n            start = i + 1;\r\n            if (rule.includes(node.type)) {\r\n                tokenArr.splice(start, end - start);\r\n                end = i;\r\n            }\r\n            if (node.type === curNode.type) {\r\n                if (node.position === 1) sameCount++;\r\n                else if (sameCount === 0) {\r\n                    tokenArr.splice(i, end - i);\r\n                    break;\r\n                }\r\n                else sameCount--;\r\n            }\r\n        }\r\n    } else {\r\n        for (let i = tokenArr.length; i--;) {\r\n            node = tokenArr[i];\r\n            if (node.type === curNode.type) {\r\n                if (node.position === 1) sameCount++;\r\n                else if (sameCount === 0) {\r\n                    tokenArr.splice(i);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\n\n//# sourceURL=webpack://MdReverse/./src/lib/vdomt.js?");

/***/ })

/******/ })["default"];
});